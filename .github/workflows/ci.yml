name: Full Stack Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-west-1

jobs:
  # 🧪 Tests et validation
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        working-directory: ./client
        run: npm ci

      - name: Run linting
        working-directory: ./client
        run: npm run lint

      - name: Test build
        working-directory: ./client
        env:
          VITE_API_URL: 'https://test-api.example.com'
        run: npm run build

  # 1️⃣ Déployer le backend
  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      api_gateway_url: ${{ steps.output.outputs.api_url }}
      ecr_client_repo_url: ${{ steps.output.outputs.ecr_url }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Deploy backend infrastructure
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve \
            -target=aws_dynamodb_table.todos_table \
            -target=aws_iam_role.lambda_apigateway_role \
            -target=aws_iam_policy.lambda_apigateway_policy \
            -target=aws_iam_role_policy_attachment.lambda_apigateway_attachment \
            -target=aws_lambda_function.lambda_function_over_https \
            -target=aws_api_gateway_rest_api.dynamo_db_operations \
            -target=aws_api_gateway_resource.todos \
            -target=aws_api_gateway_resource.todo_item \
            -target=aws_api_gateway_method.get_todos \
            -target=aws_api_gateway_method.post_todos \
            -target=aws_api_gateway_method.put_todo \
            -target=aws_api_gateway_method.delete_todo \
            -target=aws_api_gateway_integration.get_todos \
            -target=aws_api_gateway_integration.post_todos \
            -target=aws_api_gateway_integration.put_todo \
            -target=aws_api_gateway_integration.delete_todo \
            -target=aws_lambda_permission.apigw_lambda \
            -target=aws_api_gateway_deployment.api \
            -target=aws_api_gateway_stage.api \
            -target=aws_ecr_repository.client

      - name: Get outputs
        id: output
        working-directory: ./terraform
        run: |
          API_URL=$(terraform output -raw api_gateway_url)
          ECR_URL=$(terraform output -raw ecr_client_repository_url)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "ecr_url=$ECR_URL" >> $GITHUB_OUTPUT
          echo "🔌 API deployed at: $API_URL"

  # 2️⃣ Build frontend avec l'URL API
  build-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        working-directory: ./client
        run: npm ci

      - name: Build with API URL
        working-directory: ./client
        env:
          VITE_API_URL: ${{ needs.deploy-backend.outputs.api_gateway_url }}
        run: |
          echo "Building with API URL: $VITE_API_URL"
          npm run build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: client/dist/
          retention-days: 1

  # 3️⃣ Déployer le frontend
  deploy-frontend:
    needs: [deploy-backend, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      cloudfront_url: ${{ steps.output.outputs.cloudfront_url }}
      cloudfront_distribution_id: ${{ steps.output.outputs.distribution_id }}

    steps:
      - uses: actions/checkout@v4

      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: client/dist/

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Deploy frontend infrastructure
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve \
            -target=random_integer.random \
            -target=aws_s3_bucket.main \
            -target=aws_s3_bucket_website_configuration.main \
            -target=aws_s3_bucket_ownership_controls.main \
            -target=aws_s3_bucket_public_access_block.main \
            -target=aws_s3_bucket_policy.allow_content_public \
            -target=aws_s3_object.sync_remote_website_content \
            -target=aws_cloudfront_distribution.cdn

      - name: Get CloudFront outputs
        id: output
        working-directory: ./terraform
        run: |
          CLOUDFRONT_URL=$(terraform output -raw cloudfront_url)
          DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
          echo "cloudfront_url=$CLOUDFRONT_URL" >> $GITHUB_OUTPUT
          echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
          echo "📱 Frontend deployed at: $CLOUDFRONT_URL"

      - name: Invalidate CloudFront cache
        run: |
          echo "🔄 Invalidating CloudFront cache..."
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.output.outputs.distribution_id }} \
            --paths "/*"
          echo "✅ CloudFront cache invalidated"

  # 4️⃣ Build et push Docker
  docker-publish:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push client Docker image
        env:
          ECR_REPO_URL: ${{ needs.deploy-backend.outputs.ecr_client_repo_url }}
          IMAGE_TAG: ${{ github.sha }}
          VITE_API_URL: ${{ needs.deploy-backend.outputs.api_gateway_url }}
        run: |
          cd client
          echo "🐳 Building Docker image with API URL: $VITE_API_URL"
          docker build --build-arg VITE_API_URL=$VITE_API_URL -t $ECR_REPO_URL:$IMAGE_TAG .
          docker tag $ECR_REPO_URL:$IMAGE_TAG $ECR_REPO_URL:latest
          docker push $ECR_REPO_URL:$IMAGE_TAG
          docker push $ECR_REPO_URL:latest
          echo "✅ Docker image pushed: $ECR_REPO_URL:$IMAGE_TAG"

      - name: Final deployment summary
        run: |
          echo "🎉 FULL STACK DEPLOYMENT COMPLETED!"
          echo "============================================"
          echo "📱 Frontend URL: ${{ needs.deploy-frontend.outputs.cloudfront_url }}"
          echo "🔌 API URL: ${{ needs.deploy-backend.outputs.api_gateway_url }}"
          echo "🐳 Docker image: ${{ needs.deploy-backend.outputs.ecr_client_repo_url }}:${{ github.sha }}"
          echo ""
          echo "📋 Architecture deployed:"
          echo "├── 🗄️  DynamoDB: todos table"
          echo "├── ⚡ Lambda: Node.js API"
          echo "├── 🌐 API Gateway: REST endpoints"
          echo "├── 🪣 S3: Static website hosting"
          echo "├── ☁️  CloudFront: Global CDN"
          echo "└── 🐳 ECR: Docker registry"
          echo ""
          echo "🔗 Test your application:"
          echo "   curl ${{ needs.deploy-backend.outputs.api_gateway_url }}/todos"
